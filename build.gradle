apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'spring-boot'

version = getCheckedOutGitCommitHash()

buildscript {
	repositories {
		jcenter()
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE'
	}
}

sourceCompatibility = 1.7
targetCompatibility = 1.7
archivesBaseName = "simple-mongodb-rest-app"

def getCheckedOutGitCommitHash() {
	def gitFolder = "$projectDir/.git/"
	def takeFromHash = 12
	/*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
	def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
	def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
	// def isRef = head.length > 1     // ref: refs/heads/master

	if(isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

	def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
	refHead.text.trim().take takeFromHash
}

jar {
	manifest {
		attributes 'Implementation-Title': 'Spring Sample Application', 'Implementation-Version': version
	}
}

repositories{
	mavenLocal()
	mavenCentral()
}

springBoot {
	backupSource = false
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter-data-mongodb")
	compile("org.springframework.boot:spring-boot-starter-data-rest")
	compile("org.springframework.boot:spring-boot-starter-cloud-connectors")
	compile("org.springframework.boot:spring-boot-starter-test")
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.3'
}